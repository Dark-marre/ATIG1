{"version":3,"sources":["../webpack/bootstrap",".././node_modules/@git-temporal/commons/lib/escapeForCli.js",".././node_modules/@git-temporal/commons/lib/execSync.js",".././node_modules/@git-temporal/commons/lib/findGitRoot.js",".././node_modules/@git-temporal/commons/lib/index.js",".././node_modules/@git-temporal/commons/lib/isGitIgnored.js",".././node_modules/@git-temporal/commons/lib/safelyParseInt.js",".././node_modules/@git-temporal/git-diff-scraper/lib/gitDiffScraper.js",".././node_modules/@git-temporal/git-log-scraper/lib/gitLogScraper.js",".././node_modules/@git-temporal/logger/lib/logger.js",".././src/extension/WebviewPanel.ts",".././src/extension/dispatchMessage.ts",".././src/extension/index.ts",".././src/utilities/logger.ts","../external \"child_process\"","../external \"fs\"","../external \"os\"","../external \"path\"","../external \"vscode\""],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,gDAAgD,0CAA0C;AAC1F;AACA;;;;;;;;;;;;;ACRa;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA8C,cAAc;AAC5D,wCAAwC,mBAAO,CAAC,oCAAe;AAC/D,iBAAiB,mBAAO,CAAC,+EAAsB;AAC/C,mCAAmC;AACnC,kDAAkD,wBAAwB,OAAO,IAAI;AACrF,sCAAsC,6CAA6C;AACnF;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;;;;;;;;;;;;;ACtBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,kBAAM;AACxC,wBAAwB,mBAAO,CAAC,cAAI;AACpC,wBAAwB,mBAAO,CAAC,cAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9Ca;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,gFAAgB;AACjC,SAAS,mBAAO,CAAC,wEAAY;AAC7B,SAAS,mBAAO,CAAC,8EAAe;AAChC,SAAS,mBAAO,CAAC,gFAAgB;AACjC,SAAS,mBAAO,CAAC,oFAAkB;;;;;;;;;;;;;ACTtB;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA8C,cAAc;AAC5D,wCAAwC,mBAAO,CAAC,oCAAe;AAC/D,uBAAuB,mBAAO,CAAC,gFAAgB;AAC/C;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZa;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA8C,cAAc;AAC5D,6BAA6B,mBAAO,CAAC,cAAI;AACzC,+BAA+B,mBAAO,CAAC,kBAAM;AAC7C,kBAAkB,mBAAO,CAAC,gFAAuB;AACjD,iBAAiB,mBAAO,CAAC,+EAAsB;AAC/C,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0CAA0C;AACrD,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAgD;AAC3E;AACA,wBAAwB,SAAS,KAAK,8CAA8C;AACpF;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY,GAAG,KAAK;AACpE;AACA;AACA;AACA,sDAAsD,UAAU,GAAG,SAAS,GAAG,UAAU;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C,QAAQ,YAAY;AACpB,QAAQ,sBAAsB;AAC9B,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA,qCAAqC,OAAO,IAAI,6BAA6B;AAC7E;;;;;;;;;;;;;ACrJa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,wBAAwB,mBAAO,CAAC,cAAI;AACpC,0BAA0B,mBAAO,CAAC,kBAAM;AACxC,kBAAkB,mBAAO,CAAC,gFAAuB;AACjD,iBAAiB,mBAAO,CAAC,+EAAsB;AAC/C,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB;AAClE,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,KAAK;AACL,wCAAwC,MAAM,kBAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,6BAA6B,8BAA8B;AAC3D;AACA,mGAAmG,oCAAoC;AACvI,mDAAmD,SAAS,OAAO,sCAAsC;AACzG;AACA,kDAAkD,SAAS,WAAW,iCAAiC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C,wCAAwC,SAAS;AACjD,mCAAmC,MAAM,EAAE,SAAS,EAAE,UAAU,MAAM,iCAAiC;AACvG;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA,qBAAqB,KAAK,GAAG,uBAAuB;AACpD;AACA,mBAAmB,MAAuB,GAAG,SAAW;AACxD,gCAAgC,OAAO,yCAAyC,OAAO;AACvF;AACA;AACA,qCAAqC,OAAO,IAAI,6BAA6B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qCAAqC,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/Ja;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO,IAAI,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,GAAG,gCAAgC;AAChE;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;;;;;;;;;;;AC9CnB,mEAA6B;AAC7B,yEAAiC;AACjC,6FAA4C;AAC5C,6GAAoD;AAEpD,IAAI,gBAAgB,CAAC;AACrB,IAAI,YAAY,CAAC;AAEjB,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC;AAE1B;IA+CE,YAAoB,KAA0B,EAAE,aAAqB;QAlC7D,iBAAY,GAAwB,EAAE,CAAC;QAyDxC,YAAO,GAAG,GAAG,EAAE;YACpB,cAAK,CAAC,6BAA6B,CAAC,CAAC;YAErC,YAAY,CAAC,YAAY,GAAG,SAAS,CAAC;YAGtC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAEtB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBAC/B,MAAM,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;gBAClC,IAAI,CAAC,EAAE;oBACL,CAAC,CAAC,OAAO,EAAE,CAAC;iBACb;aACF;QACH,CAAC,CAAC;QAEM,oBAAe,GAAG,OAAO,CAAC,EAAE;YAClC,MAAM,IAAI,GAAG,iCAAe,CAAC,OAAO,CAAC,CAAC;YACtC,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACvC;QACH,CAAC,CAAC;QAEM,WAAM,GAAG,GAAG,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;gBACxB,OAAO;aACR;YACD,cAAK,CAAC,4BAA4B,CAAC,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACtD,CAAC,CAAC;QApDA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAGpC,IAAI,CAAC,MAAM,EAAE,CAAC;QAKd,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAGhE,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAGvE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CACrC,IAAI,CAAC,eAAe,EACpB,IAAI,EACJ,IAAI,CAAC,YAAY,CAClB,CAAC;IACJ,CAAC;IArDM,MAAM,CAAC,YAAY,CAAC,aAAqB,EAAE,mBAAwB;QAExE,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC;QAClD,YAAY,GAAG,mBAAmB,CAAC;QAEnC,IAAI,YAAY,CAAC,YAAY,EAAE;YAC7B,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC1C,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YACnC,OAAO;SACR;QAED,cAAK,CAAC,cAAc,EAAE,EAAE,aAAa,EAAE,mBAAmB,EAAE,CAAC,CAAC;QAC9D,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAC5C,YAAY,CAAC,QAAQ,EACrB,cAAc,EACd,MAAM,CAAC,UAAU,CAAC,MAAM,EACxB;YAEE,aAAa,EAAE,IAAI;YAGnB,kBAAkB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC;SACxE,CACF,CAAC;QAEF,YAAY,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IACrE,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,KAA0B,EAAE,aAAqB;QACpE,YAAY,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IACrE,CAAC;IAyDO,iBAAiB;QAMvB,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,EAAE,8BAA8B,CAAC,CACvE,CAAC;QAGF,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,CAAC;QACvE,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,MAAM,WAAW,GACf,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC;YACrC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACrC,MAAM,iBAAiB,GAAG,YAAY;YACpC,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;QAGjD,cAAK,CAAC,0BAA0B,EAAE;YAChC,WAAW;YACX,YAAY;YACZ,iBAAiB;SAClB,CAAC,CAAC;QACH,OAAO;;;;;uIAK4H,KAAK;;;;;;;+BAO7G,WAAW;sCACJ,iBAAiB;;;wBAG/B,KAAK;;sBAEP,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;uBAC1B,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;;;yBAG1B,KAAK,UAAU,SAAS;;;KAG5C,CAAC;IACJ,CAAC;CACF;AA3JD,oCA2JC;AAED;IACE,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,MAAM,QAAQ,GACZ,gEAAgE,CAAC;IACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QAC3B,IAAI,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;KACtE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;IACE,OAAO;QACL,aAAa,EAAE,kCAAkC;QACjD,aAAa,EAAE,kCAAkC;QACjD,UAAU,EAAE,iCAAiC;QAC7C,SAAS,EAAE,0BAA0B;QACrC,QAAQ,EAAE,2CAA2C;QACrD,eAAe,EAAE,gCAAgC;QACjD,eAAe,EAAE,gCAAgC;QACjD,IAAI,EAAE,0BAA0B;QAChC,CAAC,EAAE,gBAAgB;KACpB,CAAC;AACJ,CAAC;AAED;IACE,OAAO;QACL,OAAO,EAAE,CAAC;QACV,QAAQ,EAAE,CAAC;QACX,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;KACd,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;ACtMD,yEAAiC;AACjC,6FAA4C;AAC5C,wJAGuC;AACvC,4JAAyD;AAEzD,yBAAgC,OAAO;IACrC,cAAK,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAC9B,QAAQ,OAAO,CAAC,OAAO,EAAE;QACvB,KAAK,OAAO;YACV,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC7C,OAAO,IAAI,CAAC;QACd,KAAK,aAAa;YAChB,OAAO,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACtC,KAAK,SAAS;YACZ,OAAO,eAAe,CAAC,OAAO,CAAC,CAAC;QAClC,KAAK,MAAM;YACT,OAAO,YAAY,CAAC,OAAO,CAAC,CAAC;KAChC;IACD,MAAM,IAAI,KAAK,CACb,4DAA4D,IAAI,CAAC,SAAS,CACxE,OAAO,CACR,GAAG,CACL,CAAC;AACJ,CAAC;AAlBD,0CAkBC;AAED,6BAA6B,EAAE,IAAI,EAAE;IACnC,MAAM,WAAW,GAAG,gCAAc,CAAC,IAAI,CAAC,CAAC;IACzC,yBACK,WAAW,IACd,IAAI,EACJ,IAAI,EAAE,aAAa,IACnB;AACJ,CAAC;AAED,yBAAyB,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE;IAC/C,MAAM,aAAa,GAAG,kCAAgB,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjE,yBACK,aAAa,IAChB,IAAI,EAAE,SAAS,IACf;AACJ,CAAC;AAED,sBAAsB,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE;IACrD,MAAM,IAAI,GAAG,0BAAO,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;IACpD,yBACK,IAAI,IACP,IAAI,EACJ,IAAI,EAAE,MAAM,IACZ;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDD,yEAAiC;AACjC,oGAA8C;AAC9C,6FAA4C;AAE5C,kBAAyB,OAAgC;IACvD,OAAO,CAAC,aAAa,CAAC,IAAI,CACxB,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,mBAAmB,EAAE,YAAY,CAAC,EAAE;QAClE,cAAK,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QACjC,2BAAY,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IACjE,CAAC,CAAC,CACH,CAAC;IAEF,IAAI,MAAM,CAAC,MAAM,CAAC,8BAA8B,EAAE;QAEhD,MAAM,CAAC,MAAM,CAAC,8BAA8B,CAAC,2BAAY,CAAC,QAAQ,EAAE;YAC5D,uBAAuB,CAC3B,YAAiC,EACjC,KAAU;;oBAEV,cAAK,CAAC,cAAc,KAAK,EAAE,CAAC,CAAC;oBAC7B,2BAAY,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC3D,CAAC;aAAA;SACF,CAAC,CAAC;KACJ;AACH,CAAC;AApBD,4BAoBC;;;;;;;;;;;;;;;;ACxBD,sHAAqD;AAExC,kDAAkE,mGAAC;;;;;;;;;;;;ACFhF,0C;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,mC","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/extension/index.ts\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction escapeForCli(filepath) {\n    if (!filepath || filepath.trim().length === 0) {\n        return './';\n    }\n    return filepath.replace(/([\\s\\(\\)\\-])/g, `${process.platform === 'win32' ? '^' : '\\\\'}$1`);\n}\nexports.escapeForCli = escapeForCli;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = __importDefault(require(\"child_process\"));\nconst logger_1 = require(\"@git-temporal/logger\");\nfunction execSync(cmd, options = {}) {\n    (options.logFn || logger_1.debug)(`execSync ${JSON.stringify(options)} \\n$ ${cmd}`);\n    const cmdOptions = Object.assign({ stdio: 'pipe', maxBuffer: 10 * 1024 * 1024 }, options);\n    try {\n        return child_process_1.default.execSync(cmd, cmdOptions).toString();\n    }\n    catch (e) {\n        throw new Error(`error executing command: ${JSON.stringify({\n            cmd,\n            options,\n            cwd: process.cwd,\n            error: (e.stderr && Buffer.from(e.stderr).toString()) || e.toString(),\n        })}`);\n    }\n}\nexports.execSync = execSync;\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __importStar(require(\"path\"));\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst osRoot = os.platform() === 'win32' ? process.cwd().split(path.sep)[0] : '/';\nfunction findGitRoot(startingPath) {\n    const parentPath = findInParents(startingPath);\n    if (parentPath) {\n        return parentPath;\n    }\n    if (startingPath) {\n        return findInParents(null);\n    }\n    return null;\n}\nexports.findGitRoot = findGitRoot;\nfunction findInParents(startingPath) {\n    let currentPath = (startingPath && path.resolve(startingPath)) || process.cwd();\n    try {\n        if (!fs.lstatSync(currentPath).isDirectory()) {\n            currentPath = path.dirname(currentPath);\n        }\n    }\n    catch (_a) {\n        return null;\n    }\n    let files;\n    do {\n        files = fs.readdirSync(currentPath);\n        if (files.includes('.git')) {\n            break;\n        }\n        currentPath = path.resolve(currentPath, '..');\n    } while (currentPath !== osRoot);\n    if (currentPath === osRoot && !files.includes('.git')) {\n        return null;\n    }\n    return currentPath;\n}\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./escapeForCli\"));\n__export(require(\"./execSync\"));\n__export(require(\"./findGitRoot\"));\n__export(require(\"./isGitIgnored\"));\n__export(require(\"./safelyParseInt\"));\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = __importDefault(require(\"child_process\"));\nconst escapeForCli_1 = require(\"./escapeForCli\");\nfunction isGitIgnored(path) {\n    try {\n        return (child_process_1.default\n            .execSync(`git check-ignore ${escapeForCli_1.escapeForCli(path)}`, {\n            stdio: 'pipe',\n        })\n            .toString()\n            .trim() !== '');\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isGitIgnored = isGitIgnored;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction safelyParseInt(parseableNumber) {\n    if (parseableNumber === null || parseableNumber === undefined) {\n        return 0;\n    }\n    const parsedNumber = parseInt(parseableNumber, 10);\n    if (isNaN(parsedNumber)) {\n        return 0;\n    }\n    return parsedNumber;\n}\nexports.safelyParseInt = safelyParseInt;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst commons_1 = require(\"@git-temporal/commons\");\nconst logger_1 = require(\"@git-temporal/logger\");\nconst { debug, error } = logger_1.createProxies('git-diff-scraper');\nfunction getDiff(requestPath = '.', leftCommit, rightCommit) {\n    const _leftCommit = leftCommit || 'HEAD';\n    const _rightCommit = rightCommit || 'local';\n    const gitRoot = commons_1.findGitRoot(requestPath);\n    const normalizedRequestPath = normalizeRequestPath(gitRoot, requestPath);\n    debug('getDiff', requestPath, _leftCommit, _rightCommit);\n    const { contents: leftFileContents, isDirectory } = fetchContents(_leftCommit, requestPath, gitRoot);\n    const { contents: rightFileContents } = fetchContents(_rightCommit, requestPath, gitRoot);\n    const modifiedFiles = isDirectory &&\n        fetchDirectoryDiff(leftCommit, rightCommit, normalizedRequestPath, gitRoot);\n    return {\n        isDirectory,\n        leftFileContents,\n        rightFileContents,\n        modifiedFiles,\n        rightCommit: _rightCommit,\n        leftCommit: _leftCommit,\n        path: requestPath,\n    };\n}\nexports.getDiff = getDiff;\nfunction fetchContents(commitId, requestPath, gitRoot) {\n    debug('fetchContents', { commitId, requestPath, gitRoot });\n    return commitId === 'local'\n        ? fetchFromLocal(requestPath)\n        : fetchFromGit(commitId, requestPath === '.' ? './' : requestPath, gitRoot);\n}\nfunction fetchFromGit(commitId, requestPath, gitRoot) {\n    const [directory, baseFileName] = requestPath === gitRoot ||\n        requestPath === '' ||\n        requestPath.match(/^\\.[\\\\/]?$/)\n        ? [gitRoot, '']\n        : [path_1.default.dirname(requestPath), path_1.default.basename(requestPath)];\n    debug('fetchFromGit', { requestPath, gitRoot, directory, baseFileName });\n    const normalizedRequestPath = normalizeRequestPath(gitRoot, requestPath);\n    const cmd = `show ${commitId}:./${commons_1.escapeForCli(normalizedRequestPath)}`;\n    let rawContents;\n    try {\n        rawContents = execGit(gitRoot, cmd);\n    }\n    catch (e) {\n        debug('fetchFromGit', { error });\n        return {\n            isDirectory: false,\n            contents: null,\n        };\n    }\n    const isDirectory = rawContents.match(/^tree /) !== null;\n    if (isDirectory) {\n        debug('fetchFromGit', { isDirectory, rawContents });\n    }\n    return {\n        isDirectory,\n        contents: isDirectory ? null : Buffer.from(rawContents).toString('base64'),\n    };\n}\nfunction fetchFromLocal(requestPath) {\n    debug('fetchFromLocal', { requestPath });\n    if (!fs_1.default.existsSync(requestPath)) {\n        return { contents: null, isDirectory: false };\n    }\n    const isDirectory = fs_1.default.statSync(requestPath).isDirectory();\n    const returnValue = {\n        isDirectory,\n        contents: null,\n    };\n    if (!isDirectory) {\n        returnValue.contents = fs_1.default.readFileSync(requestPath).toString('base64');\n    }\n    return returnValue;\n}\nfunction fetchDirectoryDiff(_leftCommit, _rightCommit, requestPath, gitRoot) {\n    const path = requestPath === '.' ? './' : requestPath;\n    const leftCommit = _leftCommit || 'HEAD';\n    const rightCommit = _rightCommit || 'local';\n    const isDiffOnLocal = rightCommit === 'local';\n    const leftPath = leftCommit;\n    const rightPath = isDiffOnLocal ? path : `${rightCommit} ${path}`;\n    const extraOpts = '--stat=300 --compact-summary';\n    let outputLines = [];\n    try {\n        const outputBuffer = execGit(gitRoot, `diff ${extraOpts} ${leftPath} ${rightPath}`);\n        outputLines = outputBuffer.toString().split('\\n');\n    }\n    catch (e) {\n        error('Error retrieving git diff', (e.stderr && e.stderr.toString()) || e.toString());\n    }\n    return parseDirectoryDiff(outputLines);\n}\nfunction parseDirectoryDiff(outputLines) {\n    debug('parseDirectoryDiff', outputLines);\n    const modifiedFiles = [];\n    for (const line of outputLines) {\n        let matches = line.match(/(.*)\\((gone|new)\\).*\\|\\s*(\\d*)/);\n        if (matches) {\n            const [fileName, newOrGone, delta] = matches.slice(1);\n            const status = newOrGone === 'new' ? 'added' : 'deleted';\n            modifiedFiles.push(makeFile(fileName, delta, status));\n        }\n        else {\n            matches = line.match(/^([^|]*)\\|\\s*(\\d*)/);\n            if (matches) {\n                const [fileName, delta] = matches.slice(1);\n                modifiedFiles.push(makeFile(fileName, delta));\n            }\n        }\n    }\n    return modifiedFiles.sort(fileNameComparator);\n}\nfunction makeFile(fileName, delta, status = 'modified') {\n    return {\n        status,\n        path: fileName.trim(),\n        delta: parseInt(delta, 10),\n    };\n}\nfunction fileNameComparator(a, b) {\n    return a.path.localeCompare(b.path);\n}\nfunction normalizeRequestPath(gitRoot, requestPath) {\n    if (!gitRoot) {\n        return requestPath;\n    }\n    if (gitRoot === requestPath) {\n        return './';\n    }\n    const parsedRequestPath = path_1.default.parse(requestPath);\n    if (parsedRequestPath.root === '') {\n        return requestPath;\n    }\n    const relativeDir = parsedRequestPath.dir.slice(gitRoot.length + 1);\n    debug(`normalizeRequestPath ${gitRoot},\n      ${relativeDir},\n      ${parsedRequestPath.dir},\n      ${parsedRequestPath.base}`);\n    return path_1.default.join(relativeDir, parsedRequestPath.base);\n}\nfunction execGit(gitRoot, gitCmd) {\n    return commons_1.execSync(`git ${gitCmd}`, { cwd: gitRoot, logFn: debug });\n}\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst commons_1 = require(\"@git-temporal/commons\");\nconst logger_1 = require(\"@git-temporal/logger\");\nconst { debug } = logger_1.createProxies('git-log-scraper');\nconst parsedAttributes = {\n    id: '%H%n',\n    hash: '%h%n',\n    authorName: '%an%n',\n    authorEmail: '%ae%n',\n    relativeDate: '%cr%n',\n    authorDate: '%at%n',\n    message: '%s%n',\n    body: '%b',\n};\nfunction getCommitHistory(path, options = { skip: 0, maxCount: 0 }) {\n    const { skip, maxCount } = options;\n    const rawLog = fetchFileHistory(path, skip, maxCount);\n    const commits = parseGitLogOutput(rawLog)\n        .sort((a, b) => {\n        return b.authorDate - a.authorDate;\n    })\n        .map((c, i) => (Object.assign({}, c, { index: skip + i })));\n    const isFile = fs.existsSync(path) && !fs.lstatSync(path).isDirectory();\n    return {\n        isFile,\n        commits,\n        skip,\n        maxCount,\n        path,\n    };\n}\nexports.getCommitHistory = getCommitHistory;\nfunction getCommitRange(fileName) {\n    const gitRoot = commons_1.findGitRoot(fileName);\n    const logFlags = gitLogFlags({ follow: false });\n    debug('getCommitRange', { fileName, gitRoot, logFlags });\n    const cmdFileName = fileName === gitRoot ? '.' : fileName;\n    const allRevHashes = execGit(gitRoot, `log --pretty=\"format:%H\" --topo-order --date=local -- ${commons_1.escapeForCli(cmdFileName)}`).split('\\n');\n    const firstCommitRaw = execGit(gitRoot, `log ${logFlags} -n1 ${allRevHashes[allRevHashes.length - 1]}`);\n    const firstCommit = parseGitLogOutput(firstCommitRaw)[0];\n    const lastCommitRaw = execGit(gitRoot, `log ${logFlags} -n 1 -- ${commons_1.escapeForCli(fileName)}`);\n    const lastCommit = parseGitLogOutput(lastCommitRaw)[0];\n    const absoluteFileName = fileName.startsWith(gitRoot)\n        ? fileName\n        : path.resolve(gitRoot, fileName);\n    const existsLocally = fs.existsSync(absoluteFileName);\n    const hasChanges = existsLocally && hasUncommitedChanges(gitRoot, fileName);\n    return {\n        gitRoot,\n        firstCommit,\n        lastCommit,\n        existsLocally,\n        count: allRevHashes.length,\n        path: fileName,\n        hasUncommittedChanges: hasChanges,\n    };\n}\nexports.getCommitRange = getCommitRange;\nfunction hasUncommitedChanges(gitroot, fileName) {\n    const statusRaw = execGit(gitroot, `status ${fileName}`);\n    return statusRaw.match(/(new\\sfile|modified|deleted)\\:/i) !== null;\n}\nfunction fetchFileHistory(fileName, skip, maxCount) {\n    const gitRoot = commons_1.findGitRoot(fileName);\n    const flags = gitLogFlags();\n    const skipFlag = skip ? ` --skip=${skip}` : '';\n    const countFlag = maxCount ? ` -n ${maxCount}` : '';\n    return execGit(gitRoot, `log ${flags}${skipFlag}${countFlag} -- ${commons_1.escapeForCli(fileName)}`);\n}\nfunction gitLogFlags(options = { follow: true }) {\n    let format = '';\n    for (const attr in parsedAttributes) {\n        format += `${attr}:${parsedAttributes[attr]}`;\n    }\n    const follow = false && options.follow ? ' --follow' : '';\n    return `--pretty=\\\"format:${format}\\\" --topo-order --date=local --numstat ${follow}`;\n}\nfunction execGit(gitRoot, gitCmd) {\n    return commons_1.execSync(`git ${gitCmd}`, { cwd: gitRoot, logFn: debug });\n}\nfunction parseGitLogOutput(output) {\n    const logItems = [];\n    const logLines = output.split(/\\n\\r?/);\n    let commitIndex = 0;\n    let currentlyParsingAttr = null;\n    let parsedValue = null;\n    let commitObj = null;\n    let totalLinesAdded = 0;\n    let totalLinesDeleted = 0;\n    const addLogItem = () => {\n        if (!commitObj) {\n            return;\n        }\n        commitObj.linesAdded = totalLinesAdded;\n        commitObj.linesDeleted = totalLinesDeleted;\n        commitObj.index = commitIndex;\n        logItems.push(commitObj);\n        totalLinesAdded = 0;\n        totalLinesDeleted = 0;\n        commitIndex += 1;\n    };\n    for (const line of logLines) {\n        let matches = line.match(/^id\\:(.*)/);\n        if (matches) {\n            currentlyParsingAttr = 'id';\n            addLogItem();\n            commitObj = {\n                id: matches[1],\n                files: [],\n                body: '',\n                message: '',\n            };\n            continue;\n        }\n        matches = line.match(/^([^\\:]+):(.*)/);\n        if (matches) {\n            let attr;\n            [, attr, parsedValue] = matches;\n            if (attr === 'authorDate') {\n                parsedValue = parseInt(parsedValue, 10);\n            }\n            if (Object.keys(parsedAttributes).includes(attr)) {\n                currentlyParsingAttr = attr;\n                commitObj[currentlyParsingAttr] = parsedValue;\n                continue;\n            }\n        }\n        if ((matches = line.match(/^([\\d\\-]+)\\s+([\\d\\-]+)\\s+(.*)/))) {\n            let [linesAdded, linesDeleted, fileName] = matches.slice(1);\n            linesAdded = commons_1.safelyParseInt(linesAdded);\n            linesDeleted = commons_1.safelyParseInt(linesDeleted);\n            fileName = fileName.trim();\n            currentlyParsingAttr = 'files';\n            totalLinesAdded += linesAdded;\n            totalLinesDeleted += linesDeleted;\n            commitObj.files.push({\n                linesAdded,\n                linesDeleted,\n                name: fileName,\n            });\n        }\n        else if (currentlyParsingAttr === 'body') {\n            commitObj.body += `<br>${line}`;\n        }\n    }\n    if (commitObj) {\n        addLogItem();\n    }\n    return logItems;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createProxies(prefix) {\n    return {\n        error: (...args) => proxy(error, prefix, ...args),\n        log: (...args) => proxy(log, prefix, ...args),\n        debug: (...args) => proxy(debug, prefix, ...args),\n    };\n}\nexports.createProxies = createProxies;\nfunction error(...args) {\n    proxy(writeLog, 'ERROR', ...args);\n}\nexports.error = error;\nfunction warn(...args) {\n    proxy(writeLog, 'WARN', ...args);\n}\nexports.warn = warn;\nfunction log(...args) {\n    proxy(writeLog, 'info', ...args);\n}\nexports.log = log;\nfunction debug(...args) {\n    const isDebugOnWindow = typeof window !== 'undefined' && window.GTDEBUG;\n    if ((process && process.env.GTDEBUG) || isDebugOnWindow) {\n        proxy(writeLog, 'debug', ...args);\n    }\n}\nexports.debug = debug;\nconst proxy = (fn, prefix, ...args) => {\n    const [message, ...others] = args;\n    fn(`${prefix}: ${message}`, ...others);\n};\nfunction writeLog(_message, ..._others) {\n    let [message, others] = [_message, _others];\n    const logFn = message.startsWith('ERROR')\n        ? console.error\n        : message.startsWith('WARN')\n            ? console.warn\n            : console.log;\n    if (others) {\n        message = `${message} ${JSON.stringify(others, null, 2)}`;\n        others = [];\n    }\n    logFn(message, ...others);\n}\nexports.default = { createProxies, error, log, debug };\n","import * as path from 'path';\nimport * as vscode from 'vscode';\nimport { debug } from '../utilities/logger';\nimport { dispatchMessage } from './dispatchMessage';\n\nlet activeTextEditor;\nlet explorerFile;\n\nprocess.env.GTDEBUG = '1';\n\nexport class WebviewPanel {\n  // Only allow a single git-temporal panel to exist at a time\n  // for a given instance of vscode.\n  // TODO:  The git log data is cached in memory and we could\n  //   \tallow multiple windows and only start one API server to\n  //    serve all of the webview panels for a single instance of\n  //    vscode?\n  public static currentPanel: WebviewPanel | undefined;\n  public static viewType: 'git-temporal';\n\n  private readonly _panel: vscode.WebviewPanel;\n  private readonly _extensionPath: string;\n\n  private _disposables: vscode.Disposable[] = [];\n\n  public static createOrShow(extensionPath: string, currentExplorerFile: any) {\n    // If we already have a panel, show it.\n    activeTextEditor = vscode.window.activeTextEditor;\n    explorerFile = currentExplorerFile;\n\n    if (WebviewPanel.currentPanel) {\n      WebviewPanel.currentPanel._panel.reveal();\n      WebviewPanel.currentPanel.update();\n      return;\n    }\n    // Otherwise, create a new panel.\n    debug('createOrShow', { extensionPath, currentExplorerFile });\n    const panel = vscode.window.createWebviewPanel(\n      WebviewPanel.viewType,\n      'Git Temporal',\n      vscode.ViewColumn.Active,\n      {\n        // Enable javascript in the webview\n        enableScripts: true,\n\n        // And restrict the webview to only loading content from our extension's `public directory.\n        localResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'dist'))],\n      }\n    );\n\n    WebviewPanel.currentPanel = new WebviewPanel(panel, extensionPath);\n  }\n\n  public static revive(panel: vscode.WebviewPanel, extensionPath: string) {\n    WebviewPanel.currentPanel = new WebviewPanel(panel, extensionPath);\n  }\n\n  private constructor(panel: vscode.WebviewPanel, extensionPath: string) {\n    this._panel = panel;\n    this._extensionPath = extensionPath;\n\n    // Set the webview initial html content\n    this.update();\n\n    // Listen for when the panel is disposed\n    // This happens when the user closes the panel or when the panel is\n    // closed programmatically\n    this._panel.onDidDispose(this.dispose, null, this._disposables);\n\n    // Update the content based on view changes\n    this._panel.onDidChangeViewState(this.update, null, this._disposables);\n\n    // Handle messages from the webview\n    this._panel.webview.onDidReceiveMessage(\n      this.dispatchMessage,\n      null,\n      this._disposables\n    );\n  }\n\n  public dispose = () => {\n    debug('disposing WebviewPanel.html');\n\n    WebviewPanel.currentPanel = undefined;\n\n    // Clean up our resources\n    this._panel.dispose();\n\n    while (this._disposables.length) {\n      const x = this._disposables.pop();\n      if (x) {\n        x.dispose();\n      }\n    }\n  };\n\n  private dispatchMessage = message => {\n    const resp = dispatchMessage(message);\n    if (resp) {\n      this._panel.webview.postMessage(resp);\n    }\n  };\n\n  private update = () => {\n    if (!this._panel.visible) {\n      return;\n    }\n    debug('updating WebviewPanel.html');\n    this._panel.title = 'Git Temporal';\n    this._panel.webview.html = this.getHtmlForWebview();\n  };\n\n  private getHtmlForWebview() {\n    // Local path to index script run in the webview\n\n    // const scriptPathOnDisk = vscode.Uri.file(\n    //   path.join(this._extensionPath, 'dist', 'index.js')\n    // );\n    const scriptPathOnDisk = vscode.Uri.file(\n      path.join(this._extensionPath, 'dist', 'git-temporal-react.vscode.js')\n    );\n\n    // And the uri we use to load this script in the webview\n    const scriptUri = scriptPathOnDisk.with({ scheme: 'vscode-resource' });\n    const nonce = getNonce();\n    const currentPath =\n      (explorerFile && explorerFile.fsPath) ||\n      activeTextEditor.document.fileName;\n    const initialLineNumber = explorerFile\n      ? 0\n      : activeTextEditor.visibleRanges[0].start.line;\n\n    // const themeName: string | undefined = workspace.getConfiguration(\"workbench\").get(\"colorTheme\")\n    debug('webviewPanel currentPath', [\n      currentPath,\n      explorerFile,\n      initialLineNumber,\n    ]);\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-${nonce}'; style-src 'unsafe-inline'; connect-src 'unsafe-inline'\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Git Temporal</title>\n      </head>\n      <body style=\"padding-top: 20px; padding-right: 20px; overflow: hidden\">\n        <div\n          id=\"gitTemporal\"\n          data-current-path=\"${currentPath}\"\n          data-initial-line-number=\"${initialLineNumber}\">\n          Loading...\n        </div>\n        <script nonce=${nonce}>\n          window.GT_STYLE_VARS = {\n            colors: ${JSON.stringify(getColors())},\n            margins: ${JSON.stringify(getMargins())}\n          }\n        </script>\n        <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n      </body>\n      </html>\n    `;\n  }\n}\n\nfunction getNonce() {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\nfunction getColors() {\n  return {\n    altBackground: 'var(--vscode-sideBar-background)',\n    altForeground: 'var(--vscode-sideBar-foreground)',\n    background: 'var(--vscode-editor-background)',\n    blobColor: 'var(--vscode-foreground)',\n    linkText: 'var(--vscode-editorLink-activeForeground)',\n    inputBackground: 'var(--vscode-input-background)',\n    inputForeground: 'var(--vscode-input-foreground)',\n    text: 'var(--vscode-foreground)',\n    z: 'var(--vscode-)',\n  };\n}\n\nfunction getMargins() {\n  return {\n    pageTop: 5,\n    pageLeft: 0,\n    pageBottom: 10,\n    pageRight: 20,\n  };\n}\n","import * as vscode from 'vscode';\nimport { debug } from '../utilities/logger';\nimport {\n  getCommitHistory,\n  getCommitRange,\n} from '@git-temporal/git-log-scraper';\nimport { getDiff } from '@git-temporal/git-diff-scraper';\n\nexport function dispatchMessage(message) {\n  debug('got message', message);\n  switch (message.command) {\n    case 'alert':\n      vscode.window.showErrorMessage(message.text);\n      return null;\n    case 'commitRange':\n      return dispatchCommitRange(message);\n    case 'history':\n      return dispatchHistory(message);\n    case 'diff':\n      return dispatchDiff(message);\n  }\n  throw new Error(\n    `Unrecognized command received from git-temporal webview (${JSON.stringify(\n      message\n    )})`\n  );\n}\n\nfunction dispatchCommitRange({ path }) {\n  const commitRange = getCommitRange(path);\n  return {\n    ...commitRange,\n    path,\n    type: 'commitRange',\n  };\n}\n\nfunction dispatchHistory({ path, skip, maxCount }) {\n  const commitHistory = getCommitHistory(path, { skip, maxCount });\n  return {\n    ...commitHistory,\n    type: 'history',\n  };\n}\n\nfunction dispatchDiff({ path, leftCommit, rightCommit }) {\n  const diff = getDiff(path, leftCommit, rightCommit);\n  return {\n    ...diff,\n    path,\n    type: 'diff',\n  };\n}\n","import * as vscode from 'vscode';\nimport { WebviewPanel } from './WebviewPanel';\nimport { debug } from '../utilities/logger';\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('gitTemporal.start', explorerFile => {\n      debug('got start', explorerFile);\n      WebviewPanel.createOrShow(context.extensionPath, explorerFile);\n    })\n  );\n\n  if (vscode.window.registerWebviewPanelSerializer) {\n    // Make sure we register a serializer in activation event\n    vscode.window.registerWebviewPanelSerializer(WebviewPanel.viewType, {\n      async deserializeWebviewPanel(\n        webviewPanel: vscode.WebviewPanel,\n        state: any\n      ) {\n        debug(`Got state: ${state}`);\n        WebviewPanel.revive(webviewPanel, context.extensionPath);\n      },\n    });\n  }\n}\n","import { createProxies } from '@git-temporal/logger';\n\nexport const { error, warn, log, debug } = createProxies('git-temporal-vscode');\n","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"vscode\");"],"sourceRoot":""}